# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Homebrew::DevCmd::PrPull`.
# Please instead update this file by running `bin/tapioca dsl Homebrew::DevCmd::PrPull`.


class Homebrew::DevCmd::PrPull
  sig { returns(Homebrew::DevCmd::PrPull::Args) }
  def args; end
end

class Homebrew::DevCmd::PrPull::Args < Homebrew::CLI::Args
  sig { returns(T.nilable(String)) }
  def artifact; end

  sig { returns(T.nilable(String)) }
  def artifact_pattern; end

  sig { returns(T::Boolean) }
  def autosquash?; end

  sig { returns(T::Boolean) }
  def branch_okay?; end

  sig { returns(T::Boolean) }
  def clean?; end

  sig { returns(T.nilable(String)) }
  def committer; end

  sig { returns(T::Boolean) }
  def dry_run?; end

  sig { returns(T.nilable(T::Array[String])) }
  def ignore_missing_artifacts; end

  sig { returns(T::Boolean) }
  def keep_old?; end

  sig { returns(T.nilable(String)) }
  def message; end

  sig { returns(T::Boolean) }
  def n?; end

  sig { returns(T::Boolean) }
  def no_cherry_pick?; end

  sig { returns(T::Boolean) }
  def no_commit?; end

  sig { returns(T::Boolean) }
  def no_upload?; end

  sig { returns(T::Boolean) }
  def resolve?; end

  sig { returns(T::Boolean) }
  def retain_bottle_dir?; end

  sig { returns(T.nilable(String)) }
  def root_url; end

  sig { returns(T.nilable(String)) }
  def root_url_using; end

  sig { returns(T.nilable(String)) }
  def tap; end

  sig { returns(T::Boolean) }
  def warn_on_upload_failure?; end

  sig { returns(T.nilable(T::Array[String])) }
  def workflows; end
end
