# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `RuboCop::Cop::FormulaAudit::DependencyOrder`.
# Please instead update this file by running `bin/tapioca dsl RuboCop::Cop::FormulaAudit::DependencyOrder`.


class RuboCop::Cop::FormulaAudit::DependencyOrder
  sig do
    params(
      node: RuboCop::AST::Node,
      pattern: T.any(String, Symbol),
      kwargs: T.untyped,
      block: T.untyped
    ).returns(T.untyped)
  end
  def build_with_dependency_node(node, *pattern, **kwargs, &block); end

  sig do
    params(
      node: RuboCop::AST::Node,
      pattern: T.any(String, Symbol),
      kwargs: T.untyped,
      block: T.untyped
    ).returns(T::Boolean)
  end
  def buildtime_dependency?(node, *pattern, **kwargs, &block); end

  sig do
    params(
      node: RuboCop::AST::Node,
      pattern: T.any(String, Symbol),
      kwargs: T.untyped,
      block: T.untyped
    ).returns(T.untyped)
  end
  def dependency_name_node(node, *pattern, **kwargs, &block); end

  sig { params(node: RuboCop::AST::Node, kwargs: T.untyped, block: T.untyped).returns(T.untyped) }
  def depends_on_node?(node, **kwargs, &block); end

  sig do
    params(
      node: RuboCop::AST::Node,
      pattern: T.any(String, Symbol),
      kwargs: T.untyped,
      block: T.untyped
    ).returns(T::Boolean)
  end
  def negate_normal_dependency?(node, *pattern, **kwargs, &block); end

  sig do
    params(
      node: RuboCop::AST::Node,
      pattern: T.any(String, Symbol),
      kwargs: T.untyped,
      block: T.untyped
    ).returns(T::Boolean)
  end
  def optional_dependency?(node, *pattern, **kwargs, &block); end

  sig do
    params(
      node: RuboCop::AST::Node,
      pattern: T.any(String, Symbol),
      kwargs: T.untyped,
      block: T.untyped
    ).returns(T::Boolean)
  end
  def recommended_dependency?(node, *pattern, **kwargs, &block); end

  sig do
    params(
      node: RuboCop::AST::Node,
      pattern: T.any(String, Symbol),
      kwargs: T.untyped,
      block: T.untyped
    ).returns(T::Boolean)
  end
  def test_dependency?(node, *pattern, **kwargs, &block); end

  sig { params(node: RuboCop::AST::Node, kwargs: T.untyped, block: T.untyped).returns(T.untyped) }
  def uses_from_macos_node?(node, **kwargs, &block); end
end
